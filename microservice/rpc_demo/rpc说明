实现RPC调用需要解决以下四个问题
1. 如何确定要执行的函数  客户端把函数名序列化后传输，服务端反序列化后得到函数名；所以服务端和客户端都需要stub（桩代码）来完成这些操作
2. 如何表达函数的参数。  客户端把参数序列化后传输，服务端反序列化后得到参数
3. 如何进行网络传输。   基于http,tcp等网络协议，基于json或protobuf序列化协议
4. 不同进程（可能跨语言）之间如何描述接口。  序列化协议兼容多语言
所以远程调用是和语言无关的

远程调用流程：
① 服务调用方（client）以本地调用方式调用服务；
② client stub接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体；
③ client stub找到服务地址，并将消息发送到服务端；

④ server 端接收到消息；
⑤ server stub收到消息后进行解码；
⑥ server stub根据解码结果调用本地的服务；
⑦ 本地服务执行并将结果返回给server stub；
⑧ server stub将返回结果打包成能够进行网络传输的消息体；
⑨ 按地址将消息发送至调用方；

⑩ client 端接收到消息；
⑪ client stub收到消息并进行解码；
⑫ 调用方得到最终结果。

使用RPC框架的目标是只需要关心第1步和最后1步，中间的其他步骤统统封装起来，让使用者无需关心。
例如社区中各式RPC框架（grpc、thrift等）就是为了让RPC调用更方便。